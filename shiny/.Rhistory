xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,main='Effect of Dosage on Tooth Length',
xlab='Dosage (mg/day)',ylab='Tooth Length')
data("ToothGrowth")
tooth <- ToothGrowth
str(tooth)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len, main='Effect of Delivery Method on Tooth Length',
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,main='Effect of Dosage on Tooth Length',
xlab='Dosage (mg/day)',ylab='Tooth Length')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len, main='Effect of Delivery Method on Tooth Length',
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,main='Effect of Dosage on Tooth Length',
xlab='Dosage (mg/day)')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len, main='Effect of Delivery Method on Tooth Length',
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,main='Effect of Dosage on Tooth Length',
xlab='Dosage (mg/day)',ylab='Tooth Length')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
main='Effect of Delivery Methods/Dosage on Tooth Length',
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len, main='Effect of Delivery Methods',
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,main='Effect of Dosage on Tooth Length',
xlab='Dosage (mg/day)',ylab='Tooth Length')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
title('x')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext('x')
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext(“Title for Two Plots”, outer = TRUE, cex = 1.5)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext('“Title for Two Plots”', outer = TRUE)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext('Title for Two Plots', outer = TRUE)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext('Title for Two Plots', outer = TRUE,cex=1.5)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext("Densities", outer = TRUE, cex = 1.5)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext("My 'Title' in a strange place", side = 3,  outer = TRUE)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
mtext("My 'Title' in a strange place", side = 3, line = -21, outer = TRUE)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
text(0.5,0.5,"First title",cex=2,font=2)
par(mfrow=c(1,2))
plot(x=tooth$supp,y=tooth$len,
xlab='Delivery Methods',ylab='Tooth Length', main='Effects on Tooth Length')
plot(x=as.factor(tooth$dose),y=tooth$len,
xlab='Dosage (mg/day)',ylab='Tooth Length')
require(ggplot2)
ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
labs(title = "Tooth Growth") +
labs(x = "Delivery method")
require(ggplot2)
ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
labs(title = "Tooth Growth") +
labs(x = "Delivery method") + labs(y="Tooth Length")
require(ggplot2)
ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
labs(title = "Tooth Growth by Delivery Method and Dosage") +
labs(x = "Delivery method") + labs(y="Tooth Length")
require(ggplot2)
ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot()  +
labs(title = "Tooth Growth by Delivery Method") +
labs(x = "Delivery method") + labs(y="Tooth Length")
require(ggplot2)
ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp))  +
labs(title = "Tooth Growth by Delivery Method") +
labs(x = "Delivery method") + labs(y="Tooth Length")
g2<-ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
labs(title = "Tooth Growth by Delivery Method and Dosage") +
labs(x = "Delivery method") + labs(y="Tooth Length")
grid.arrange(g1,g2,ncol=2)
require(ggplot2)
require(gridExtra)
g1<-ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp))  +
labs(title = "Tooth Growth by Delivery Method") +
labs(x = "Delivery method") + labs(y="Tooth Length")
g2<-ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
labs(title = "Tooth Growth by Delivery Method and Dosage") +
labs(x = "Delivery method") + labs(y="Tooth Length")
grid.arrange(g1,g2,ncol=2)
g2<-ggplot(aes(x = supp, y = len), data = ToothGrowth)  +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose) +
labs(title = "Tooth Growth by Delivery Method and Dosage") +
labs(x = "Delivery method") + labs(y="Tooth Length")
grid.arrange(g1,g2,ncol=1)
t1<-t.test(data=tooth,len~supp,paired=FALSE,var.equal=FALSE)
attributes(t1)
t1$conf.int
t1$conf.int[1:2]
t1$p.value
t2<-t.test(data=tooth[tooth$dose==0.5|tooth$dose==1.0,],len~dose,paired=FALSE,
var.equal=FALSE,alternative='less')
t2$p.value
t2$conf.int[1:2]
t4<-t.test(data=tooth[tooth$dose==0.5&(tooth$dose=='OJ'
| tooth$dose=='VC'),],len~dose,paired=FALSE,
var.equal=FALSE,alternative='less')
t4$p.value
tooth
t4<-t.test(data=tooth[tooth$dose==0.5&(tooth$supp=='OJ'
| tooth$dosesupp=='VC'),],len~supp,paired=FALSE,
var.equal=FALSE)
t4$p.value
t.test(data=tooth[tooth$dose==0.5&(tooth$supp=='OJ'
+                                        | tooth$dosesupp=='VC'),],len~supp,paired=FALSE,
+            var.equal=FALSE)
t4<-t.test(data=tooth[tooth$dose==0.5&(tooth$supp=='OJ'|tooth$dosesupp=='VC'),],
len~supp,paired=FALSE,var.equal=FALSE)
t.test(data=tooth,len~supp)
t4<-t.test(data=tooth,
len~supp,paired=FALSE,var.equal=FALSE)
t4$p.value
t4<-t.test(data=tooth,tooth[(tooth$dose==0.5)&(tooth$supp=='OJ'|tooth$supp=='VC'),],
len~supp,paired=FALSE,var.equal=FALSE)
t4$p.value
t4<-t.test(data=tooth,tooth[tooth$dose==0.5&(tooth$supp=='OJ'|tooth$supp=='VC'),],
len~supp,paired=FALSE,var.equal=FALSE)
t4$p.value
t4<-t.test(data=tooth,tooth[tooth$dose=='0.5'&(tooth$supp=='OJ'|tooth$supp=='VC'),],
len~supp,paired=FALSE,var.equal=FALSE)
t4$p.value
t4<-t.test(data=tooth[tooth$dose==0.5&(tooth$supp=='OJ'|tooth$supp=='VC'),],
len~supp,paired=FALSE,var.equal=FALSE)
t4$p.value
table(iris$Species)
inTrain <- createDataPartition(iris, p=0.7, list=FALSE)
library(kernlab)
inTrain <- createDataPartition(iris, p=0.7, list=FALSE)
createDataPartition
library(caret)
inTrain <- createDataPartition(iris, p=0.7, list=FALSE)
train<-iris[inTrain]
test<-iris[-inTrain]
dim(train)
train
dim(test)
test<-iris[-inTrain,]
train<-iris[inTrain,]
dim(test)
fit <- train(Species~.,data=train,method='rpart')
fit
train
train<-iris[inTrain,]
train
test
fit <- train(Species~.,data=test,method='rpart')
fit
plot(fit)
fit$finalModel
plot(fit$finalModel)
plot(fit$finalModel, uniform=TRUE)
text(fit$finalModel)
par(mfrow=c(1,1))
plot(fit$finalModel, uniform=TRUE)
text(fit$finalModel)
library(rattle)
install.packages(GTK+)
install.packages("RGtk2", depen=T
)
library(RGtk2)
library(rattle)
library(rattle)
library(caret)
inTrain<-createDataPartition(data=iris,p=0.7,list=FALSE)
inTrain
data("iris")
inTrain<-createDataPartition(data=iris,p=0.7,list=FALSE)
inTrain<-createDataPartition(iris,p=0.7,list=FALSE)
inTrain
inTrain<-createDataPartition(iris,p=0.7)
inTrain
inTrain<-createDataPartition(iris,p=0.7,list=FALSE)
inTrain<-createDataPartition(iris,p=0.7,list=FALSE,times=1)
inTrain
inTrain<-createDataPartition(iris$Species,p=0.7,list=FALSE,times=1)
inTrain
train<-iris[inTrain,]
test<-iris[-inTrain,]
test
train
inTrain
inTrain<-createDataPartition(iris,p=0.7,list=FALSE,times=1)
inTrain
trainIndex <- createDataPartition(iris$Species, p = .8,
list = FALSE,
)
trainIndex
irisTrain <- iris[ trainIndex,]
irisTest  <- iris[-trainIndex,]
fit <- train(data=irisTrain, Species~.,method='rpart')
fancyRpartPlot(fit$finalModel)
predict(fit, newdata = irisTest)
help(confusionMatrix)
confusionMatrix(predict(fit, newdata = irisTest),irisTest)
confusionMatrix(predict(fit, newdata = irisTest),irisTest$Species)
confusionMatrix(predict(fit, newdata = irisTrain),irisTrain$Species)
help(ctreeBag)
## treebag <- bag(bbbDescr, logBBB, B = 10,
##                bagControl = bagControl(fit = ctreeBag$fit,
##                                        predict = ctreeBag$pred,
##                                        aggregate = ctreeBag$aggregate))
treebag
treebag
ozone
data(ozone)
fit <- train(data=irisTrain, Species~.,method='rf')
fit
getTree(fit$finalModel, k=2)
irisP <- classCenter(train[,c(3,4)], train$Species,fit$finalModel$prox)
fit$finalModel$proximity
fit$finalModel
help(classCenter)
fit <- train(data=irisTrain, Species~.,method='rf',prox=TRUE)
fit$finalModel$prox
irisP <- classCenter(train[,c(3,4)], train$Species,fit$finalModel$prox)
irisP
irisP <- classCenter(train, train$Species,fit$finalModel$prox)
irisP
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris.p <- classCenter(iris[,-5], iris[,5], iris.rf$prox)
iris.p
ifit <- randomForest(iris, iris$Species, prox=TRUE)
iris.p <- classCenter(iris, iris$Species, iris.rf$prox)
ifit <- randomForest(iris[,-5], iris$Species, prox=TRUE)
iris.p <- classCenter(iris[,=5], iris$Species, iris.rf$prox)
ifit <- randomForest(iris[,-5], iris$Species, prox=TRUE)
iris.p <- classCenter(iris[,-5], iris$Species, iris.rf$prox)
iris.p
ifit
fit
class(fit)
class(ifit)
fit <- train(data=irisTrain, Species~.,method='lda')
fit
plot(fit)
plot(fit$finalModel)
library(rpart)
library(ElemStatLearn)
installed.packages(pgmm)
installed.packages('pgmm')
installed.packages('AppliedPredictiveModeling')
install.packages('AppliedPredictiveModeling')
library('AppliedPredictiveModeling')
library('pgmm')
library('ElemStatLearn')
library('rpart')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segment <- segmentationOriginal
segment
str(segment)
trainIndex <- createDataPartition(segment$Case,list=FALSE)
set.seed(125)
train <- segment[trainIndex,]
test<-segment[-trainIndex,]
fit <-train(Case~.,data=train,method='rpart')
fit
fancyRpartPlot(fit$finalModel)
str(train)
fit$method
fit$finalModel
fit <-train(Case~.,data=train,method='rpart')
fit
fit$finalModel
set.seed(125)
fit <-train(Case~.,data=train,method='rpart')
fit$finalModel
fit$finalModel
fit <-train(Case~.,data=train,method='rpart')
fit$finalModel
fancyRpartPlot(fit$finalModel)
trainIndex<-segment[segment$Case=='train',]
training <- segment[trainIndex,]
trainIndex
trainIndex<-segment$Case=='train'
training <- segment[trainIndex,]
training
View(test)
View(test)
View(training)
trainIndex
trainIndex<-segment$Case=='Train'
training <- segment[trainIndex,]
training
testing<-segment[-trainIndex,]
testing
testing
testing<-segment[!trainIndex,]
set.seed(125)
fit<-train(Class~.,data=training,method='rpart')
fancyRpartPlot(fit$finalModel)
predict(fit, TotalIntenCh2 ==1)
library(pgmm)
data(olive)
olive = olive[,-1]
olive
str(olive)
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
newdata
head(olive)
data(olive)
head(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Area~.,data=olive,method='rpart')
predict(fit,newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit <- train(chd~.,data=trainSA,method='glm', family='binomial')
str(trainSA)
fol<-chd~age+alcohol+obesity+tobacco+typea+ldl
fit <- train(fol.,data=trainSA,method='glm', family='binomial')
fit <- train(fol,data=trainSA,method='glm', family='binomial')
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predict(fit,newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
set.seed(33833)
fit <- train(y~.,data=vowel.train,method='rf')
help(varlamp)
help("varImp")
varImp(fit)
varImp(fit$finalModel)
help(randomForest)
fit <- randomForest(y~.,data=vowel.train)
fit
varImp(fit)
help(varImp)
fit <- randomForest(y~.,data=vowel.train,importance=FALSE)
varImp(fit)
order(varImp(fit), decreasing = TRUE)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
vowel.train$y<-as.factor(vowel.train$y)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
i<-order(varImp(modelfit), decreasing = TRUE)
i
vowel.train[,i]
head(vowel.train)
head(vowel.train[,i])
head(vowel.train[,i+1])
gpclib
install.packages('gpblib')
install.packages('gpclib')
help(gpclib)
library(gpclib)
help(gpclib)
class ? gpc.poly
a <- cbind(rnorm(100), rnorm(100))
a <- a[chull(a), ]
a
plot(a)
p1 <- read.polyfile(system.file("poly-ex/ex-poly1.txt", package = "gpclib"))
p2 <- read.polyfile(system.file("poly-ex/ex-poly2.txt", package = "gpclib"))
plot(append.poly(p1, p2))
plot(setdiff(p2, p1), poly.args = list(col = 4), add = TRUE)
ls()
setwd("~/projects/product_final")
library(slidify)
slidify::knit2slides('index.Rmd')
author('backtestdeck')
shiny::runApp('~/projects/product_final')
You can access the app [here](https://cstorm125.shinyapps.io/product_final/)
chartSeries(g, theme = chartTheme("white"), type = "line", TA=c(addVo()))
addBBands(n=dayMA,sd=2,ma=select)
require(quantmod)
require(PerformanceAnalytics)
symb='^GSPC'
dayMA=20
select='SMA'
from.dat='2013-01-01'
to.dat='2016-02-11'
#symbol
g<-getSymbols(symb,auto.assign = FALSE)
close <- Cl(g)
bbands <- BBands(close,n=dayMA,ma=select)
lower <- bbands$dn
upper<-bbands$up
signals<-Lag(ifelse(close<lower,1,ifelse(close>upper,-1,0)))
returns <- ROC(close, type = 'discrete')*signals
returns <- returns[paste(from.dat,'/',to.dat,sep='')]
#chart
chartSeries(g, theme = chartTheme("white"), type = "line", TA=c(addVo()))
addBBands(n=dayMA,sd=2,ma=select)
help(train)
library(caret)
help(train)
require(e1071)
help(require)
library(quanteda)
predict.quadmkn <- function (words) {
words <- tail(tokenize(toLower(words),
removeNumbers=TRUE,
removePunct=TRUE,
removeTwitter = TRUE,
simplify=TRUE),3)
word1_word2_word3 <- paste(tail(words,3),collapse = ' ')
quad <- head(d4[w1w2w3==word1_word2_word3,c('pred','pkn','ngram'),with=FALSE])
word2_word3 <- paste(tail(words,2),collapse = ' ')
tri <- head(d3[w1w2==word2_word3,c('pred','pkn','ngram'),with=FALSE])
word3 <- tail(words,1)
bi <- head(d2[w1==word3,c('pred','pkn','ngram'),with=FALSE])
uni <- head(d1)
result <- rbind(quad,tri,bi,uni)
head(result,10)
}
library(quanteda)
d1 <- readRDS('data/d1.RDS')
d2 <- readRDS('data/d2.RDS')
d3 <- readRDS('data/d3.RDS')
d4 <- readRDS('data/d4.RDS')
system.time(predict.quadmkn('one of the'))
predict.quadmkn('one of the')
setwd("~/projects/swiftkey")
predict.quadmkn <- function (words) {
words <- tail(tokenize(toLower(words),
removeNumbers=TRUE,
removePunct=TRUE,
removeTwitter = TRUE,
simplify=TRUE),3)
word1_word2_word3 <- paste(tail(words,3),collapse = ' ')
quad <- head(d4[w1w2w3==word1_word2_word3,c('pred','pkn','ngram'),with=FALSE])
word2_word3 <- paste(tail(words,2),collapse = ' ')
tri <- head(d3[w1w2==word2_word3,c('pred','pkn','ngram'),with=FALSE])
word3 <- tail(words,1)
bi <- head(d2[w1==word3,c('pred','pkn','ngram'),with=FALSE])
uni <- head(d1)
result <- rbind(quad,tri,bi,uni)
head(result,10)
}
library(quanteda)
d1 <- readRDS('data/d1.RDS')
d2 <- readRDS('data/d2.RDS')
d3 <- readRDS('data/d3.RDS')
d4 <- readRDS('data/d4.RDS')
system.time(predict.quadmkn('one of the'))
predict.quadmkn('one of the')
shiny::runApp()
shiny::runApp('shiny')
setwd("~/projects/swiftkey/shiny")
shiny::runApp()
shiny::runApp()
